Django Arcitechture:

first new app..
url path
migration to create databases : for this app databases
create model means databases table model
make migration create migration file

> django shell for interactive shell to access current var, debug.


> admin interface is seperated for stuff so admin panel is available in django. here 
	you can add databases here.. its kinda cool..
	its a new thinking for me.
	- It's kind of new idea, user cann not create new model here, but can give entry of data here.

	: So first need to watch other's work.

> Starting apps vs project
	adding this app in setting


Homework:
	- by learning vote project, I can extend the same idea first then I can build my own project.
	- take this key ideas here and think about your readwise apps.
	- first I've to build user and Notes model.



## Views
template or page
For example, in a blog application, you might have the following views:

Blog homepage – displays the latest few entries.
Entry “detail” page – permalink page for a single entry.
Year-based archive page – displays all months with entries in the given year.
Month-based archive page – displays all days with entries in the given month.
Day-based archive page – displays all entries in the given day.
Comment action – handles posting comments to a given entry.

> Url and view connection
> different route and query slector

### Post
request.POST is a dictionary-like object that lets you access submitted data by key name. In this case, request.POST['choice'] returns the ID of the selected choice, as a string. request.POST values are always strings.
** KeyError **

### HttpResponseRedirect
After incrementing the choice count, the code returns an HttpResponseRedirect rather than a normal HttpResponse. HttpResponseRedirect takes a single argument: the URL to which the user will be redirected (see the following point for how we construct the URL in this case).

As the Python comment above points out, you should always return an HttpResponseRedirect after successfully dealing with POST data. This tip isn’t specific to Django; it’s good web development practice in general.

#### Reverse()
We are using the reverse() function in the HttpResponseRedirect constructor in this example. This function helps avoid having to hardcode a URL in the view function. It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view. In this case, using the URLconf we set up in Tutorial 3, this reverse() call will return a string like

### Race condition.
The code for our vote() view does have a small problem. It first gets the selected_choice object from the database, then computes the new value of votes, and then saves it back to the database. If two users of your website try to vote at exactly the same time, this might go wrong: The same value, let’s say 42, will be retrieved for votes. Then, for both users the new value of 43 is computed and saved, but 44 would be the expected value.